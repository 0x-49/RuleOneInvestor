---
// Props for the component
interface Props {
  stockSymbol?: string;
  companyName?: string;
  currentPrice?: number;
  stickerPrice?: number;
  mosPrice?: number;
  isLoading?: boolean;
}

const { stockSymbol, companyName, currentPrice, stickerPrice, mosPrice, isLoading = false } = Astro.props;

// Helper function to format currency
const formatCurrency = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2 }).format(value) : 'N/A';
};

// Calculate the position of the current price on the gauge
const calculateGaugePosition = (current: number, min: number, max: number) => {
  if (current === undefined || min === undefined || max === undefined || max <= min) return 0;
  const range = max - min;
  const position = ((current - min) / range) * 100;
  return Math.max(0, Math.min(100, position)); // Clamp between 0 and 100
};

// Determine the range for the gauge (using MOS price and Sticker price as anchors)
const gaugeMin = mosPrice !== undefined ? mosPrice * 0.8 : undefined; // 20% below MOS
const gaugeMax = stickerPrice !== undefined ? stickerPrice * 1.2 : undefined; // 20% above Sticker

const currentPricePosition = currentPrice !== undefined && gaugeMin !== undefined && gaugeMax !== undefined
  ? calculateGaugePosition(currentPrice, gaugeMin, gaugeMax)
  : undefined;

// Determine the color of the current price indicator
let priceColor = 'text-gray-500';
if (currentPrice !== undefined && mosPrice !== undefined && stickerPrice !== undefined) {
  if (currentPrice <= mosPrice) {
    priceColor = 'text-green-600'; // Below MOS (Buy)
  } else if (currentPrice > mosPrice && currentPrice <= stickerPrice) {
    priceColor = 'text-yellow-600'; // Between MOS and Sticker (Hold/Consider)
  } else {
    priceColor = 'text-red-600'; // Above Sticker (Sell/Avoid)
  }
}
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      Fair Value Gauge
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Visualizing current price relative to estimated fair value for {companyName || 'Company'} ({stockSymbol || 'TICKER'})
    </p>
  </div>

  <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        <div class="h-8 bg-gray-200 rounded w-full"></div>
        <div class="grid grid-cols-3 gap-4">
          <div class="h-12 bg-gray-200 rounded"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
        </div>
      </div>
    ) : currentPrice === undefined || stickerPrice === undefined || mosPrice === undefined ? (
      <!-- No Data Fallback -->
      <div class="text-center text-gray-500">
        Fair value data not available for {stockSymbol || 'this stock'}.
      </div>
    ) : (
      <!-- Fair Value Gauge -->
      <div class="space-y-6">
        <div class="relative h-8 bg-gray-200 rounded-full overflow-hidden">
          <!-- Green (Buy) Zone -->
          {gaugeMin !== undefined && mosPrice !== undefined && gaugeMax !== undefined && (
            <div 
              class="absolute inset-y-0 left-0 bg-green-500 opacity-75"
              style={`width: ${calculateGaugePosition(mosPrice!, gaugeMin!, gaugeMax!)}%;`}
            ></div>
          )}
          <!-- Yellow (Hold) Zone -->
           {gaugeMin !== undefined && mosPrice !== undefined && stickerPrice !== undefined && gaugeMax !== undefined && (
            <div
              class="absolute inset-y-0 bg-yellow-500 opacity-75"
              style={`left: ${calculateGaugePosition(mosPrice!, gaugeMin!, gaugeMax!)}%; width: ${calculateGaugePosition(stickerPrice!, mosPrice!, gaugeMax!) - calculateGaugePosition(mosPrice!, gaugeMin!, gaugeMax!)}%;`}
            ></div>
          )}
          <!-- Red (Sell) Zone -->
           {stickerPrice !== undefined && gaugeMax !== undefined && (
            <div
              class="absolute inset-y-0 bg-red-500 opacity-75"
              style={`left: ${calculateGaugePosition(stickerPrice!, gaugeMin!, gaugeMax!)}%; width: ${100 - calculateGaugePosition(stickerPrice!, gaugeMin!, gaugeMax!)}%;`}
            ></div>
          )}

          <!-- Current Price Indicator -->
          {currentPricePosition !== undefined && (
            <div
              class={`absolute top-0 bottom-0 w-1 bg-gray-900 rounded-full shadow-lg ${priceColor === 'text-green-600' ? 'bg-green-800' : priceColor === 'text-yellow-600' ? 'bg-yellow-800' : priceColor === 'text-red-600' ? 'bg-red-800' : 'bg-gray-900'}`}
              style={`left: ${currentPricePosition}%; transform: translateX(-50%);`}
            ></div>
          )}
        </div>

        <div class="grid grid-cols-3 text-center text-sm font-medium">
          <div>
            <p class="text-green-600">Buy Below</p>
            <p class="text-gray-900 font-bold">{formatCurrency(mosPrice)}</p>
          </div>
          <div>
            <p class="text-yellow-600">Fair Value</p>
            <p class="text-gray-900 font-bold">{formatCurrency(stickerPrice)}</p>
          </div>
          <div>
            <p class="text-red-600">Sell Above</p>
            <p class="text-gray-900 font-bold">{formatCurrency(stickerPrice)}</p> {/* Often Sticker Price is used as a sell signal too */}
          </div>
        </div>

        <div class="text-center text-sm text-gray-600">
          Current Price: <span class={`font-bold ${priceColor}`}>{formatCurrency(currentPrice)}</span>
        </div>
      </div>
    )}
  </div>
</div>
