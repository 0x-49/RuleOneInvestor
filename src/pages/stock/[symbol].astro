---
import MainLayout from '../../layouts/MainLayout.astro';
import StockSearch from '../../components/StockSearch.astro';
import FinancialTrends from '../../components/FinancialTrends.astro';
import FairValueGauge from '../../components/FairValueGauge.astro';
import BigFourMetrics from '../../components/BigFourMetrics.astro';
import DetailedFinancialTable from '../../components/DetailedFinancialTable.astro';
import DividendAnalysis from '../../components/DividendAnalysis.astro';
import ComparisonPanel from '../../components/ComparisonPanel.astro';
import NewsAndSentiment from '../../components/NewsAndSentiment.astro';
import NoDataFallback from '../../components/NoDataFallback.astro';
import RuleOneAnalysis from '../../components/RuleOneAnalysis.astro';
import TechnicalAnalysis from '../../components/TechnicalAnalysis.astro';
import UserProfile from '../../components/UserProfile.astro'; // Assuming UserProfile might be used on a stock page
import PERatioAnalysis from '../../components/PERatioAnalysis.astro'; // Import PERatioAnalysis

// Get the stock symbol from the URL parameter
const { symbol } = Astro.params as { symbol: string }; // Explicitly type symbol as string

// Define page title
const pageTitle = `${symbol} Analysis`;

// Server-side data fetching for the stock symbol
let stockData = null;
let fetchError = null;
try {
  const res = await fetch(`${Astro.url.origin}/api/stocks/${symbol}`);
  if (!res.ok) {
    fetchError = `Error fetching data for ${symbol}: ${res.statusText}`;
  } else {
    stockData = await res.json();
  }
} catch (err) {
  const errorObj = err as any;
  fetchError = `Error fetching data for ${symbol}: ${errorObj?.message || errorObj}`;
}

const isLoading = !stockData && !fetchError;

// Destructure all required data for components
const financialData = stockData?.financialData || {};
const peRatio = stockData?.peRatio;
const industryPeRatio = stockData?.industryPeRatio;
const sectorPeRatio = stockData?.sectorPeRatio;
const historicalPeRatios = stockData?.historicalPeRatios || [];
const currentPrice = stockData?.currentPrice;
const stickerPrice = stockData?.stickerPrice;
const mosPrice = stockData?.mosPrice;
const analysisData = stockData?.analysisData || {};
const newsItems = stockData?.newsItems || [];
const overallSentiment = stockData?.overallSentiment;
const technicalData = stockData?.technicalData || {};
const bigFourGrowth = stockData?.bigFourGrowth || {};

---

<MainLayout title={pageTitle}>
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6">{pageTitle}</h1>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Left Column -->
      <div class="lg:col-span-2 space-y-6">
        <!-- Stock Search (Optional on this page, but included for completeness) -->
        <StockSearch />

        <!-- Financial Trends -->
        <FinancialTrends financialData={financialData} isLoading={isLoading} />

        <DetailedFinancialTable financialData={financialData} isLoading={isLoading} />

        <TechnicalAnalysis technicalData={technicalData} isLoading={isLoading} />

        <NewsAndSentiment newsItems={newsItems} overallSentiment={overallSentiment} isLoading={isLoading} />

        {fetchError && (
          <div class="bg-red-100 text-red-800 p-4 rounded shadow mt-4">
            {fetchError}
          </div>
        )}
      </div>

      <!-- Right Column (Sidebar) -->
      <div class="space-y-6">
        <!-- Fair Value Gauge -->
        <FairValueGauge currentPrice={currentPrice} stickerPrice={stickerPrice} mosPrice={mosPrice} isLoading={isLoading} />

        <BigFourMetrics stockSymbol={symbol} metrics={bigFourGrowth} isLoading={isLoading} />

        <DividendAnalysis dividendData={financialData.dividends} isLoading={isLoading} />

        <RuleOneAnalysis analysisData={analysisData} isLoading={isLoading} />

        <PERatioAnalysis peRatio={peRatio} industryPeRatio={industryPeRatio} sectorPeRatio={sectorPeRatio} historicalPeRatios={historicalPeRatios} isLoading={isLoading} />

        <!-- User Profile (Optional on this page) -->
        <!-- <UserProfile userName="Test User" isLoading={isLoading} /> -->

        <!-- Batch Analysis Panel (Optional on this page) -->
        <!-- <BatchAnalysisPanel isLoading={isLoading} /> -->

        <!-- Watchlist (Optional on this page) -->
        <!-- <Watchlist isLoading={isLoading} /> -->
      </div>
    </div>
  </div>
</MainLayout>
