---
// Define interface for income statement data structure (replace with actual types if available)
interface IncomeStatementItem {
  year: string;
  revenue?: number;
  netIncome?: number;
  eps?: number;
  [key: string]: any; // Allow other properties with any type
}

interface FinancialData {
  incomeStatement?: IncomeStatementItem[];
  // Add interfaces for other financial statements if needed
}

// Props for the component
interface Props {
  stockSymbol?: string;
  companyName?: string;
  financialData?: FinancialData;
  isLoading?: boolean;
}

const { stockSymbol, companyName, financialData, isLoading = false } = Astro.props;

// Helper function to format currency
const formatCurrency = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(value) : 'N/A';
};

// Helper function to format numbers
const formatNumber = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US').format(value) : 'N/A';
};

// Prepare chart data for key financial metrics
const chartData = financialData?.incomeStatement?.map(item => ({
  year: item.year,
  revenue: item.revenue,
  netIncome: item.netIncome,
  eps: item.eps,
})).reverse() || [];

const hasData = chartData.length > 0;
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      Financial Trends
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Visualizing key financial metrics over time for {companyName || 'Company'} ({stockSymbol || 'TICKER'})
    </p>
  </div>

  <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        <div class="h-64 bg-gray-200 rounded w-full"></div>
      </div>
    ) : !hasData ? (
      <!-- No Data Fallback -->
      <div class="text-center text-gray-500">
        Financial trend data not available for {stockSymbol || 'this stock'}.
      </div>
    ) : (
      <!-- Financial Trends Chart -->
      <div class="w-full h-64" id="financial-trends-chart"></div>
    )}
  </div>
</div>

<script define:vars={{ chartData }}>
  import Chart from 'chart.js/auto'; // Import Chart.js

  document.addEventListener('DOMContentLoaded', () => {
    const chartCanvas = document.getElementById('financial-trends-chart');

    if (chartCanvas && chartData && chartData.length > 0) {
      new Chart(chartCanvas, {
        type: 'line',
        data: {
          labels: chartData.map(item => item.year),
          datasets: [
            {
              label: 'Revenue',
              data: chartData.map(item => item.revenue),
              borderColor: '#3B82F6', // Blue
              backgroundColor: 'rgba(59, 130, 246, 0.2)',
              tension: 0.1,
              fill: false,
              yAxisID: 'y',
            },
            {
              label: 'Net Income',
              data: chartData.map(item => item.netIncome),
              borderColor: '#10B981', // Green
              backgroundColor: 'rgba(16, 185, 129, 0.2)',
              tension: 0.1,
              fill: false,
              yAxisID: 'y',
            },
            {
              label: 'EPS',
              data: chartData.map(item => item.eps),
              borderColor: '#F59E0B', // Yellow
              backgroundColor: 'rgba(245, 158, 11, 0.2)',
              tension: 0.1,
              fill: false,
              yAxisID: 'y1', // Use a secondary Y-axis for EPS
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              title: {
                display: true,
                text: 'Value ($)'
              },
              beginAtZero: true,
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              title: {
                display: true,
                text: 'EPS ($)'
              },
              beginAtZero: true,
              grid: {
                drawOnChartArea: false, // Only draw grid lines for the left axis
              },
            },
            x: {
              title: {
                display: true,
                text: 'Year'
              }
            }
          },
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    label += context.dataset.label === 'EPS' ? `$${context.parsed.y.toFixed(2)}` : `$${context.parsed.y.toFixed(0)}`;
                  }
                  return label;
                }
              }
            }
          }
        },
      });
    }
  });
</script>

<style>
  /* Add any component-specific styles here */
</style>
