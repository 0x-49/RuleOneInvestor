---
// Define interface for dividend data structure (replace with actual types if available)
interface AnnualDividend {
  year: string;
  dividendPerShare?: number;
}

interface AnnualEarnings {
  year: string;
  eps?: number;
}

interface DividendData {
  annualDividends?: AnnualDividend[];
  annualEarnings?: AnnualEarnings[];
  currentPrice?: number;
}

// Props for the component
interface Props {
  stockSymbol?: string;
  companyName?: string;
  dividendData?: DividendData;
  isLoading?: boolean;
}

const { stockSymbol = '', companyName = '', dividendData, isLoading = false } = Astro.props;

// Helper function to format currency
const formatCurrency = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2 }).format(value) : 'N/A';
};

// Helper function to format percentage
const formatPercent = (value?: number) => {
  return value !== undefined ? `${value.toFixed(2)}%` : 'N/A';
};

// Determine dividend yield and payout ratio for the latest period
const latestDividend = dividendData?.annualDividends?.[0];
const latestEarnings = dividendData?.annualEarnings?.[0];

const dividendYield = latestDividend?.dividendPerShare !== undefined && dividendData?.currentPrice !== undefined && dividendData.currentPrice > 0
  ? (latestDividend.dividendPerShare / dividendData.currentPrice) * 100
  : undefined;

const payoutRatio = latestDividend?.dividendPerShare !== undefined && latestEarnings?.eps !== undefined && latestEarnings.eps > 0
  ? (latestDividend.dividendPerShare / latestEarnings.eps) * 100
  : undefined;

// Determine dividend growth rate (5-year average)
const calculateDividendGrowth = (dividends: any[]) => {
  if (!dividends || dividends.length < 6) return undefined; // Need at least 6 years for 5 years of growth

  const recentDividends = dividends.slice(0, 6).reverse(); // Get last 6 years and reverse to chronological order
  let totalGrowth = 0;
  let growthCount = 0;

  for (let i = 1; i < recentDividends.length; i++) {
    const current = recentDividends[i].dividendPerShare;
    const previous = recentDividends[i - 1].dividendPerShare;

    if (current !== undefined && previous !== undefined && previous > 0) {
      totalGrowth += ((current - previous) / previous) * 100;
      growthCount++;
    }
  }

  return growthCount > 0 ? totalGrowth / growthCount : undefined;
};

const dividendGrowth5Y = calculateDividendGrowth(dividendData?.annualDividends!);
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      Dividend Analysis
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Key dividend metrics for {companyName || 'Company'} ({stockSymbol || 'TICKER'})
    </p>
  </div>

  <div class="border-t border-gray-200">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="p-6 space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        <div class="grid grid-cols-2 gap-4">
          <div class="h-12 bg-gray-200 rounded"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
        </div>
        <div class="h-4 bg-gray-200 rounded w-32"></div>
        <div class="h-48 bg-gray-200 rounded"></div>
      </div>
    ) : !dividendData || (!dividendData.annualDividends?.length! && !dividendData.annualEarnings?.length!) ? (
      <!-- No Data Fallback -->
      <div class="p-6 text-center text-gray-500">
        No dividend data available for {stockSymbol || 'this stock'}.
      </div>
    ) : (
      <!-- Dividend Metrics and History -->
      <dl>
        <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
          <dt class="text-sm font-medium text-gray-500">
            Current Dividend Yield
          </dt>
          <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
            {dividendYield !== undefined ? formatPercent(dividendYield) : 'N/A'}
          </dd>
        </div>
        <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
          <dt class="text-sm font-medium text-gray-500">
            Latest Annual Dividend per Share
          </dt>
          <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
            {latestDividend?.dividendPerShare !== undefined ? formatCurrency(latestDividend.dividendPerShare) : 'N/A'}
          </dd>
        </div>
        <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
          <dt class="text-sm font-medium text-gray-500">
            Payout Ratio (Latest)
          </dt>
          <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
            {payoutRatio !== undefined ? formatPercent(payoutRatio) : 'N/A'}
          </dd>
        </div>
        <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
          <dt class="text-sm font-medium text-gray-500">
            Dividend Growth Rate (5Y Avg)
          </dt>
          <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
            {dividendGrowth5Y !== undefined ? formatPercent(dividendGrowth5Y) : 'N/A'}
          </dd>
        </div>

        {/* Dividend History Table */}
        {dividendData.annualDividends?.length! > 0 && (
          <div class="px-4 py-5 sm:px-6">
            <h4 class="text-md font-medium text-gray-900 mb-3">Annual Dividend History</h4>
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Year
                    </th>
                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Dividend per Share
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {dividendData.annualDividends!.map(dividend => (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {dividend.year}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                        {formatCurrency(dividend.dividendPerShare)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </dl>
    )}
  </div>
</div>
