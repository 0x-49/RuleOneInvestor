---
import type { StockWithMetrics } from '@shared/schema';
import { cn } from '../lib/utils';

interface IconProps {
  class?: string;
}

const IconPlus = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>;
const IconScale = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><path d="M16 16l3-3-3-3"></path><path d="M8 8l-3 3 3 3"></path><path d="M14 6l-4 12"></path><path d="M4 12H2"></path><path d="M22 12h-2"></path><path d="M12 4V2"></path><path d="M12 22v-2"></path></svg>;
const IconInfo = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>;
const IconCheckCircle = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>;
const IconAlertTriangle = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>;
const IconTrendingUp = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>;
const IconTrendingDown = (props: IconProps) => <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={props.class}><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>;

export interface Props {
  stockData?: StockWithMetrics;
  isLoading: boolean;
}

const { stockData, isLoading } = Astro.props;
---

<div class="mb-6 p-6 border rounded-lg shadow-sm bg-card text-card-foreground">
  {isLoading ? (
    <div>
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-4">
          <div>
            <div class="h-8 w-16 mb-2 bg-slate-200 dark:bg-slate-700 rounded"></div>
            <div class="h-4 w-32 bg-slate-200 dark:bg-slate-700 rounded"></div>
          </div>
          <div class="flex items-center space-x-2">
            <div class="h-8 w-20 bg-slate-200 dark:bg-slate-700 rounded"></div>
            <div class="h-6 w-16 bg-slate-200 dark:bg-slate-700 rounded"></div>
          </div>
        </div>
        <div class="flex items-center space-x-3">
          <div class="h-10 w-32 bg-slate-200 dark:bg-slate-700 rounded"></div>
          <div class="h-10 w-24 bg-slate-200 dark:bg-slate-700 rounded"></div>
        </div>
      </div>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
        {[...Array(4)].map(() => (
          <div class="h-20 bg-slate-200 dark:bg-slate-700 rounded"></div>
        ))}
      </div>
    </div>
  ) : !stockData ? (
    <div class="text-center text-slate-600 dark:text-slate-400">
      Select a stock to view its analysis
    </div>
  ) : (
    <!-- Main content will go here in the next step -->
    <div>
        <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-4">
                <div>
                    <h2 class="text-2xl font-bold text-slate-900 dark:text-slate-100">
                        {stockData.symbol}
                    </h2>
                    <p class="text-slate-600 dark:text-slate-400">{stockData.name}</p>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="text-3xl font-bold text-slate-900 dark:text-slate-100">
                        ${stockData.price.toFixed(2)}
                    </span>
                    <span
                        class={cn(
                            "px-2 py-1 text-sm font-medium rounded-md",
                            stockData.changePercent >= 0
                                ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
                                : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"
                        )}
                    >
                        {stockData.changePercent >= 0 ? '+' : ''}{stockData.changePercent.toFixed(2)}%
                    </span>
                </div>
            </div>
            <div class="flex items-center space-x-3">
                <button
                    id="add-to-watchlist-btn"
                    class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-green-600 text-white hover:bg-green-700 h-10 px-4 py-2"
                >
                    <IconPlus />
                    <span class="ml-2">Add to Watchlist</span>
                </button>
                <button class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
                    <IconScale />
                    <span class="ml-2">Compare</span>
                </button>
            </div>
        </div>
                <!-- Rule One Quality Indicators -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
          <!-- Rule One Quality -->
          <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm font-medium text-slate-600 dark:text-slate-400">
                Rule One Quality
              </span>
              <div class="relative group">
                <IconInfo />
                <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-xs text-white bg-slate-700 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
                  Big Four metrics all growing &gt; 10% annually
                </span>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              {stockData.ruleOneQuality?.isExcellent ? (
                <IconCheckCircle class="text-green-500" />
              ) : (
                <IconAlertTriangle class="text-yellow-500" />
              )}
              <span class="font-semibold text-slate-900 dark:text-slate-100">
                {stockData.ruleOneQuality?.isExcellent ? "Excellent" : "Fair"}
              </span>
            </div>
          </div>

          <!-- Debt Payoff -->
          <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm font-medium text-slate-600 dark:text-slate-400">
                Debt Payoff
              </span>
              <div class="relative group">
                <IconInfo />
                <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-xs text-white bg-slate-700 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
                  Years to pay off debt with current FCF
                </span>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              {(stockData.ruleOneQuality?.debtPayoffYears ?? 5) < 5 ? (
                <IconCheckCircle class="text-green-500" />
              ) : (
                <IconAlertTriangle class="text-yellow-500" />
              )}
              <span class="font-semibold text-slate-900 dark:text-slate-100">
                {stockData.ruleOneQuality?.debtPayoffYears?.toFixed(1) ?? "N/A"} years
              </span>
            </div>
          </div>

          <!-- Management ROIC -->
          <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm font-medium text-slate-600 dark:text-slate-400">
                Management ROIC
              </span>
              <div class="relative group">
                <IconInfo />
                <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-xs text-white bg-slate-700 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
                  Return on Invested Capital &gt; 10%
                </span>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              {(stockData.ruleOneQuality?.roic ?? 0) > 10 ? (
                <IconCheckCircle class="text-green-500" />
              ) : (
                <IconAlertTriangle class="text-yellow-500" />
              )}
              <span class="font-semibold text-slate-900 dark:text-slate-100">
                {stockData.ruleOneQuality?.roic?.toFixed(1) ?? "N/A"}%
              </span>
            </div>
          </div>

          <!-- Margin of Safety -->
          <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm font-medium text-slate-600 dark:text-slate-400">
                Margin of Safety
              </span>
              <div class="relative group">
                <IconInfo />
                <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-xs text-white bg-slate-700 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
                  Current price vs sticker price. Aim for &gt; 20-50% for safety.
                </span>
              </div>
            </div>
            <div class="flex items-center space-x-2">
              {(stockData.ruleOneQuality?.marginOfSafety ?? 0) > 20 ? (
                <IconCheckCircle class="text-green-500" />
              ) : (
                <IconAlertTriangle class="text-yellow-500" />
              )}
              <span class="font-semibold text-slate-900 dark:text-slate-100">
                {stockData.ruleOneQuality?.marginOfSafety?.toFixed(0) ?? "N/A"}%
              </span>
            </div>
          </div>
        </div>

        <!-- Big Four Growth Metrics -->
        {stockData.bigFourGrowthRates && (
          <div class="mt-6">
            <h3 class="text-lg font-semibold text-slate-800 dark:text-slate-200 mb-3">Big Four Growth Metrics</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              {[ 
                { name: 'Revenue', data: stockData.bigFourGrowthRates.revenue, tooltip: 'Company\'s total income from sales' },
                { name: 'Equity', data: stockData.bigFourGrowthRates.equity, tooltip: 'Book value or Net Asset Value' },
                { name: 'EPS', data: stockData.bigFourGrowthRates.eps, tooltip: 'Earnings Per Share' },
                { name: 'Free Cash Flow', data: stockData.bigFourGrowthRates.freeCashFlow, tooltip: 'Cash flow available after capital expenditures' },
              ].map(metric => (
                <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-slate-600 dark:text-slate-400">{metric.name}</span>
                    <div class="relative group">
                      <IconInfo />
                      <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-xs text-white bg-slate-700 rounded-md opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
                        {metric.tooltip}
                      </span>
                    </div>
                  </div>
                  <div class="space-y-1">
                    {[ {label: '1yr', value: metric.data?.['1yr']}, {label: '5yr', value: metric.data?.['5yr']}, {label: '10yr', value: metric.data?.['10yr']} ].map(period => (
                      <div class="flex justify-between items-center text-sm">
                        <span class="text-slate-500 dark:text-slate-400">{period.label}:</span>
                        {typeof period.value === 'number' ? (
                          <span class:list={[
                            "font-semibold",
                            { 
                              "text-green-500": typeof period.value === 'number' && period.value >= 10,
                              "text-yellow-500": typeof period.value === 'number' && period.value < 10
                            }
                          ]}>
                            {period.value.toFixed(1)}%
                            {period.value >= 10 ? <IconTrendingUp class="inline ml-1 h-4 w-4" /> : <IconTrendingDown class="inline ml-1 h-4 w-4" />}
                          </span>
                        ) : (
                          <span class="text-slate-500 dark:text-slate-400">N/A</span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
    </div>
  )}
</div>

<script define:vars={{ stockSymbol: stockData?.symbol }}>
  const addToWatchlistBtn = document.getElementById('add-to-watchlist-btn');
  
  if (addToWatchlistBtn && stockSymbol) {
    addToWatchlistBtn.addEventListener('click', async () => {
      const originalButtonText = addToWatchlistBtn.innerHTML;
      addToWatchlistBtn.disabled = true;
      addToWatchlistBtn.innerHTML = 
        `<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>Adding...`;

      try {
        const response = await fetch('/api/watchlist', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ symbol: stockSymbol }),
        });

        if (response.ok) {
          addToWatchlistBtn.innerHTML = 
            `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>Added`;
          // Button remains disabled
        } else {
          const errorData = await response.json();
          console.error('Failed to add to watchlist:', errorData);
          addToWatchlistBtn.innerHTML = 'Error';
          setTimeout(() => {
            addToWatchlistBtn.innerHTML = originalButtonText;
            addToWatchlistBtn.disabled = false;
          }, 2000);
        }
      } catch (error) {
        console.error('Error adding to watchlist:', error);
        addToWatchlistBtn.innerHTML = 'Error';
        setTimeout(() => {
          addToWatchlistBtn.innerHTML = originalButtonText;
          addToWatchlistBtn.disabled = false;
        }, 2000);
      }
    });
  }
</script>
