---
// Props for the component
interface Props {
  stockSymbol?: string;
  companyName?: string;
  newsItems?: {
    title?: string;
    summary?: string;
    source?: string;
    date?: string;
    link?: string;
  }[];
  alerts?: {
    type?: 'info' | 'warning' | 'error';
    message?: string;
  }[];
  isLoading?: boolean;
}

const { stockSymbol, companyName, newsItems, alerts, isLoading = false } = Astro.props;

// Helper function to determine alert color
const getAlertColor = (type?: string) => {
  switch (type) {
    case 'warning':
      return 'bg-yellow-100 text-yellow-800';
    case 'error':
      return 'bg-red-100 text-red-800';
    case 'info':
    default:
      return 'bg-blue-100 text-blue-800';
  }
};
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      News & Alerts
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Latest updates for {companyName || 'Company'} ({stockSymbol || 'TICKER'})
    </p>
  </div>

  <div class="border-t border-gray-200">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="p-6 space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        {[...Array(5)].map((_, i) => (
          <div class="space-y-2">
            <div class="h-4 bg-gray-200 rounded w-full"></div>
            <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            <div class="h-3 bg-gray-200 rounded w-1/2"></div>
          </div>
        ))}
      </div>
    ) : (!newsItems?.length! && !alerts?.length!) ? (
      <!-- No Data Fallback -->
      <div class="p-6 text-center text-gray-500">
        No news or alerts available for {stockSymbol || 'this stock'}.
      </div>
    ) : (
      <!-- News and Alerts List -->
      <div class="divide-y divide-gray-200">
        {/* Alerts */}
        {alerts?.length! > 0 && (
          <div class="p-4 space-y-3">
            {alerts!.map(alert => (
              <div class={`p-3 rounded-md ${getAlertColor(alert.type)}`}>
                <p class="text-sm font-medium">{alert.message}</p>
              </div>
            ))}
          </div>
        )}

        {/* News Items */}
        {newsItems?.length! > 0 && (
          <div class="p-4 space-y-4">
            {newsItems!.map(item => (
              <div class="border-b pb-3 last:border-b-0">
                <p class="font-medium text-gray-900">{item.title}</p>
                <p class="text-sm text-gray-600 mb-2">{item.summary}</p>
                <div class="flex justify-between text-xs">
                  <span class="text-gray-500">{item.source} â€¢ {item.date}</span>
                  {item.link && <a href={item.link} class="text-blue-600 hover:text-blue-800">Read more</a>}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    )}
  </div>
</div>
