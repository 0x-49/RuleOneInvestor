---
// src/components/BigFourMetrics.astro
import Chart from 'chart.js/auto';

interface Props {
  stockSymbol: string;
  metrics?: any[];
  bigFourGrowth?: any;
  isLoading?: boolean;
}

const { stockSymbol, metrics = [], bigFourGrowth = {}, isLoading = false } = Astro.props;

const dataYearsAvailable = metrics.length;
const showDeepSearchPrompt = dataYearsAvailable > 0 && dataYearsAvailable < 7;

// Helper function to get growth average from bigFourGrowth (props)
const getGrowthAverage = (growthData: any, key: string) => {
  if (!growthData || !growthData[key]) return 0;
  return growthData[key];
};


// Prepare chart data from metrics
const chartData = metrics.map((metric, index) => {
  if (index === 0) return null;

  const previousMetric = metrics[index - 1];

  const salesGrowth = (metric.revenue !== undefined && metric.revenue !== null && previousMetric.revenue !== undefined && previousMetric.revenue !== null && previousMetric.revenue > 0)
    ? ((metric.revenue - previousMetric.revenue) / previousMetric.revenue) * 100
    : 0;

  const epsGrowth = (metric.eps !== undefined && metric.eps !== null && previousMetric.eps !== undefined && previousMetric.eps !== null && previousMetric.eps > 0)
    ? ((metric.eps - previousMetric.eps) / previousMetric.eps) * 100
    : 0;

  const equityGrowth = (metric.bookValue !== undefined && metric.bookValue !== null && previousMetric.bookValue !== undefined && previousMetric.bookValue !== null && previousMetric.bookValue > 0)
    ? ((metric.bookValue - previousMetric.bookValue) / previousMetric.bookValue) * 100
    : 0;

  const fcfGrowth = (metric.freeCashFlow !== undefined && metric.freeCashFlow !== null && previousMetric.freeCashFlow !== undefined && previousMetric.freeCashFlow !== null && previousMetric.freeCashFlow > 0)
    ? ((metric.freeCashFlow - previousMetric.freeCashFlow) / previousMetric.freeCashFlow) * 100
    : 0;

  return {
    year: metric.year,
    salesGrowth,
    epsGrowth,
    equityGrowth,
    fcfGrowth,
  };
}).filter(item => item !== null);


// Icons (using inline SVG for simplicity) - Keep these as they are used in the template
const TrendingUpIcon = `
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trending-up">
    <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/>
    <polyline points="16 7 22 7 22 13"/>
  </svg>
`;

const DollarSignIcon = `
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-dollar-sign">
    <line x1="12" x2="12" y1="2" y2="22"/>
    <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
  </svg>
`;

const BarChart3Icon = `
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bar-chart-3">
    <path d="M3 3v18h18"/>
    <path d="M18 17V9"/>
    <path d="M13 17V5"/>
    <path d="M8 17v-3"/>
  </svg>
`;

const PiggyBankIcon = `
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-piggy-bank">
    <path d="M19 5c0 1.1-.9 2-2 2h-4v8c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2Z"/>
    <path d="M2 17v.01"/>
    <path d="M7 15h4"/>
    <path d="M17 15h2"/>
    <path d="M21 12V7a2 0 0 0-2-2H17"/>
    <path d="M12 17h.01"/>
  </svg>
`;

const InfoIcon = `
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info">
    <circle cx="12" cy="12" r="10"/>
    <line x1="12" x2="12" y1="16" y2="12"/>
    <line x1="12" x2="12.01" y1="8" y2="8"/>
  </svg>
`;

// Metric data structure for rendering - Update to use fetched data
const metricItems = bigFourGrowth ? [
  {
    title: "Sales Growth",
    key: "salesGrowth",
    icon: TrendingUpIcon,
    color: "text-green-600",
    bgColor: "from-green-500/10 to-green-500/5 border-green-500/20",
    value: bigFourGrowth.salesGrowth,
  },
  {
    title: "EPS Growth",
    key: "epsGrowth",
    icon: DollarSignIcon,
    color: "text-blue-600",
    bgColor: "from-blue-500/10 to-blue-500/5 border-blue-500/20",
    value: bigFourGrowth.epsGrowth,
  },
  {
    title: "Equity Growth",
    key: "equityGrowth",
    icon: BarChart3Icon,
    color: "text-yellow-600",
    bgColor: "from-yellow-500/10 to-yellow-500/5 border-yellow-500/20",
    value: bigFourGrowth.equityGrowth,
  },
  {
    title: "FCF Growth",
    key: "fcfGrowth",
    icon: PiggyBankIcon,
    color: "text-purple-600",
    bgColor: "from-purple-500/10 to-purple-500/5 border-purple-500/20",
    value: bigFourGrowth.fcfGrowth,
  },
] : [];

---

<div class="space-y-4">
  {isLoading ? (
    <!-- Skeleton Loader -->
    <div class="bg-white shadow rounded-lg p-6">
      <div class="flex items-center justify-between mb-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        <div class="h-6 bg-gray-200 rounded w-32"></div>
      </div>
      <div class="grid grid-cols-2 gap-4 mb-6">
        <div class="h-32 bg-gray-200 rounded-lg"></div>
        <div class="h-32 bg-gray-200 rounded-lg"></div>
        <div class="h-32 bg-gray-200 rounded-lg"></div>
        <div class="h-32 bg-gray-200 rounded-lg"></div>
      </div>
      <div class="h-64 bg-gray-200 rounded-lg"></div>
    </div>
  ) : (!bigFourGrowth || metrics.length === 0) ? (
    <!-- No Data Fallback -->
    <div class="bg-white shadow rounded-lg p-6 text-center">
      <div class="mb-4">
        <Fragment set:html={InfoIcon} class="h-12 w-12 text-gray-400 mx-auto mb-2" />
        <h3 class="text-lg font-semibold text-gray-700 mb-2">
          No Financial Data Available
        </h3>
      </div>
      <div class="text-gray-600 space-y-2 max-w-md mx-auto">
        <p>This stock isn't covered by our financial data providers.</p>
        <p class="text-sm">
          This commonly happens with smaller international stocks, recent IPOs, or companies from emerging markets.
        </p>
      </div>
    </div>
  ) : (
    <!-- Metrics and Chart -->
    <div class="bg-white shadow rounded-lg p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-bold text-gray-900">The Big Four Growth Rates</h2>
        {/* Period selection dropdown - simplified or removed if only one average is available */}
        {/* Keeping for now, but functionality needs review based on bigFourGrowth structure */}
        <div class="flex items-center space-x-2">
          <select id="period-select" class="rounded-md border-gray-300 shadow-sm text-sm focus:border-blue-500 focus:ring-blue-500">
            <option value="10year">10-Year Avg</option>
            {/* Add options for 5-Year and 1-Year if available in bigFourGrowth or calculated */}
          </select>
          <div class="relative group">
            <Fragment set:html={InfoIcon} class="h-4 w-4 text-gray-400 cursor-help" />
            <div class="absolute z-10 invisible group-hover:visible bg-gray-800 text-white text-xs rounded py-1 px-2 right-0 top-full mt-2 w-48">
              Rule One focuses on businesses growing consistently in all four areas
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-2 gap-4 mb-6" id="metrics-grid">
        {metricItems.map((metric) => (
          <div class={`bg-gradient-to-r ${metric.bgColor} rounded-lg p-4 border`} data-metric={metric.key}>
            <div class="flex items-center justify-between mb-2">
              <span class="text-sm font-medium text-gray-700">
                {metric.title}
              </span>
              <Fragment set:html={metric.icon} class={`h-5 w-5 ${metric.color}`} />
            </div>
            <div class="text-2xl font-bold text-gray-900" data-value>
              {/* Display the fetched value */}
              {metric.value !== null && metric.value !== undefined ? `${metric.value.toFixed(1)}%` : 'N/A'}
            </div>
            {/* Simplified display for averages, assuming bigFourGrowth provides the main average */}
            <div class="text-xs text-gray-600 space-y-1">
               <div class="text-green-600 font-medium pt-1">
                Target: >10%
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Chart Container -->
      <div class="mt-6">
        <canvas id="growth-chart" class="w-full h-64"></canvas> {/* Use canvas for Chart.js */}
      </div>
    </div>
  )}

  {showDeepSearchPrompt && stockSymbol && (
    <!-- DeepSearchPrompt Component (Astro version needed) -->
    <div class="bg-white shadow rounded-lg p-6 text-center">
      <h3 class="text-lg font-semibold mb-2">More Data Available?</h3>
      <p class="text-gray-600 mb-4">
        We only found {dataYearsAvailable} years of data. Would you like to perform a deeper search for {stockSymbol}?
      </p>
      <button class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
        Deep Search
      </button>
    </div>
    <!-- Note: DeepSearchPrompt.astro needs to be created -->
  )}
</div>

{/* Client-side script for Chart.js - needs to be in a script tag with is:inline or in a separate file */}
<script is:inline define:vars={{ chartData }}>
  document.addEventListener('DOMContentLoaded', () => {
    const chartCanvas = document.getElementById('growth-chart');

    if (chartCanvas && chartData && chartData.length > 0) {
      new Chart(chartCanvas, { // Removed type assertion here
        type: 'line',
        data: {
          labels: chartData.map(item => item.year),
          datasets: [
            {
              label: 'Sales Growth',
              data: chartData.map(item => item.salesGrowth),
              borderColor: '#059669',
              backgroundColor: 'rgba(5, 150, 105, 0.2)',
              tension: 0.1,
              fill: false,
            },
            {
              label: 'EPS Growth',
              data: chartData.map(item => item.epsGrowth),
              borderColor: '#1E40AF',
              backgroundColor: 'rgba(30, 64, 175, 0.2)',
              tension: 0.1,
              fill: false,
            },
            {
              label: 'Equity Growth',
              data: chartData.map(item => item.equityGrowth),
              borderColor: '#F59E0B',
              backgroundColor: 'rgba(245, 158, 11, 0.2)',
              tension: 0.1,
              fill: false,
            },
            {
              label: 'FCF Growth',
              data: chartData.map(item => item.fcfGrowth),
              borderColor: '#8B5CF6',
              backgroundColor: 'rgba(139, 92, 246, 0.2)',
              tension: 0.1,
              fill: false,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Growth Rate (%)'
              }
            },
            x: {
                title: {
                display: true,
                text: 'Year'
              }
            }
          },
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    label += `${context.parsed.y.toFixed(1)}%`;
                  }
                  return label;
                }
              }
            }
          }
        },
      });
    }
  });
</script>

<style>
  /* Add any component-specific styles here */
</style>
