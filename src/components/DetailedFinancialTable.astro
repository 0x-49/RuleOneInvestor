---
// Define interfaces for financial data structure (replace with actual types if available)
interface FinancialStatementItem {
  year: string;
  [key: string]: any; // Allow other properties with any type
}

interface FinancialData {
  incomeStatement?: FinancialStatementItem[];
  balanceSheet?: FinancialStatementItem[];
  cashFlowStatement?: FinancialStatementItem[];
}

// Props for the component
interface Props {
  financialData?: FinancialData;
  isLoading?: boolean;
}

const { financialData, isLoading = false } = Astro.props;

// Helper function to format currency
const formatCurrency = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0 }).format(value) : 'N/A';
};

// Helper function to format numbers
const formatNumber = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US').format(value) : 'N/A';
};

// Determine the years for the table headers
const years = financialData?.incomeStatement?.map(item => item.year).reverse() || [];
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      Detailed Financials
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Comprehensive financial statements.
    </p>
  </div>

  <div class="border-t border-gray-200">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="p-6">
        <div class="grid grid-cols-6 gap-4">
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
          <div class="h-6 bg-gray-200 rounded col-span-1"></div>
        </div>
        <div class="mt-4 space-y-4">
          {[...Array(20)].map((_, i) => (
            <div class="grid grid-cols-6 gap-4">
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
              <div class="h-4 bg-gray-200 rounded col-span-1"></div>
            </div>
          ))}
        </div>
      </div>
    ) : !financialData || (
        !financialData.incomeStatement?.length &&
        !financialData.balanceSheet?.length &&
        !financialData.cashFlowStatement?.length
      ) ? (
      <!-- No Data Fallback -->
      <div class="p-6 text-center text-gray-500">
        No detailed financial data available for this stock.
      </div>
    ) : (
      <!-- Financial Tables -->
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Metric
              </th>
              {years.map(year => (
                <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  {year}
                </th>
              ))}
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {/* Income Statement */}
            {financialData.incomeStatement?.length! > 0 && (
              <>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-100" colspan={years.length + 1}>
                    Income Statement
                  </td>
                </tr>
                {financialData.incomeStatement![0] && Object.keys(financialData.incomeStatement![0]).map(key => {
                  if (key === 'year') return null;
                  return (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </td>
                      {financialData.incomeStatement!.map(item => (
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                          {typeof item[key] === 'number' ? formatCurrency(item[key]) : item[key]}
                        </td>
                      )).reverse()}
                    </tr>
                  );
                })}
              </>
            )}

            {/* Balance Sheet */}
            {financialData.balanceSheet?.length! > 0 && (
              <>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-100" colspan={years.length + 1}>
                    Balance Sheet
                  </td>
                </tr>
                {financialData.balanceSheet![0] && Object.keys(financialData.balanceSheet![0]).map(key => {
                  if (key === 'year') return null;
                  return (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </td>
                      {financialData.balanceSheet!.map(item => (
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                          {typeof item[key] === 'number' ? formatCurrency(item[key]) : item[key]}
                        </td>
                      )).reverse()}
                    </tr>
                  );
                })}
              </>
            )}

            {/* Cash Flow Statement */}
            {financialData.cashFlowStatement?.length! > 0 && (
              <>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-gray-100" colspan={years.length + 1}>
                    Cash Flow Statement
                  </td>
                </tr>
                {financialData.cashFlowStatement![0] && Object.keys(financialData.cashFlowStatement![0]).map(key => {
                  if (key === 'year') return null;
                  return (
                    <tr>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </td>
                      {financialData.cashFlowStatement!.map(item => (
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                          {typeof item[key] === 'number' ? formatCurrency(item[key]) : item[key]}
                        </td>
                      )).reverse()}
                    </tr>
                  );
                })}
              </>
            )}
          </tbody>
        </table>
      </div>
    )}
  </div>
</div>
