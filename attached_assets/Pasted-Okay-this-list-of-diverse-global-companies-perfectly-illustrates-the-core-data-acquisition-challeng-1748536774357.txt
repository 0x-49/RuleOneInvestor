Okay, this list of diverse global companies perfectly illustrates the core data acquisition challenge we've been discussing for your "Rule One Investing Assistant." Getting complete, accurate, 10-year historical financial data for all of these is ambitious but achievable with a smart, multi-layered strategy.

Based on all our previous discussions and the journey you've already undertaken (integrating Yahoo Finance, FMP, Alpha Vantage, and considering an AI agent), here's how you can approach ensuring your app gets the necessary Rule One data for companies like these:

Rule One Data Requirements Recap:

For each company, for the last 10+ years (and ideally the latest Trailing Twelve Months - TTM):

Revenue (Sales)
EPS (Earnings Per Share) - Diluted, from continuing operations.
Equity (Book Value per Share) - Common shareholders' equity.
Operating Cash Flow (OCF)
Capital Expenditures (CapEx) - To calculate Free Cash Flow (FCF = OCF - CapEx).
Free Cash Flow (FCF)
Long-Term Debt
Net Income (for ROIC calculation)
Total Capital / Invested Capital (for ROIC calculation)
From these, you'll calculate the growth rates of Sales, EPS, Equity, and FCF, plus ROIC and Debt/FCF payoff years.

Multi-Layered Data Acquisition Strategy:

No single source will be perfect for every company on this global list. You need a robust, prioritized, and fallback-enabled system:

Layer 1: Primary & Secondary Aggregated APIs (Your Current Setup, Refined)

APIs: Continue using your trio: Yahoo Finance, Financial Modeling Prep (FMP), and Alpha Vantage.
Prioritization & Fallback Logic:
Define a primary API (e.g., FMP for its potentially deeper historical fundamental data, or Yahoo for breadth).
If the primary API fails to return data, returns incomplete data (e.g., only 5 years instead of 10), or has obvious errors for a requested stock, automatically try the secondary API.
If the secondary fails, try the tertiary API.
Ticker Symbol & Exchange Normalization: This is CRITICAL for this list.
The tickers you've pasted (e.g., NASDAQ-NVDA, TWSE-2330, OMXCOP-NOVO_B, SSE-601919) are TradingView's composite symbols.
Each API you use will have its own way of representing these. For example:
Yahoo Finance might use NVDA, 2330.TW, NOVO-B.CO, 601919.SS.
FMP and Alpha Vantage will have their own conventions.
Your app needs a robust mapping/translation layer. When a user searches "Nvidia" or "NVDA," your system should identify it as NASDAQ-NVDA (or similar internal representation) and then know how to query each of your connected APIs for that specific listing. You might need to build or use a mapping database for company names/common tickers to exchange-specific tickers.
Data Point Mapping: For each API, you need to map their specific field names (e.g., totalRevenue, netIncomeCommonStockholders, freeCashFlow) to your internal representation for the Rule One metrics.
Data Validation & Cleaning:
Implement checks for missing years within the 10-year period.
Flag wildly anomalous data points (like the Harley Davidson EPS issue you saw).
Handle currency conversions if necessary (though for growth rate calculations, consistency in the reported currency is often sufficient, Rule One usually uses USD for comparisons).
Be aware of stock splits and adjust historical per-share data accordingly (good APIs usually handle this).
Layer 2: The "Deep Search AI Agent" (Your Original Vision - The Gap Filler)

This layer becomes crucial when Layer 1 fails to provide sufficient, good-quality 10-year data. This is where your app can truly shine.

Trigger: When APIs don't return 10 years of data for key metrics (Sales, EPS, Equity, OCF, CapEx, Debt) for a user-requested company.
Process:
Identify Investor Relations (IR) Source: Your AI would attempt to find the company's official IR website. This can be done via automated Google searches (e.g., "Nvidia investor relations," "Taiwan Semiconductor Manufacturing investor relations").
Locate Financial Reports: Scan the IR site for links to Annual Reports (10-K for US companies, or equivalent for international) and Quarterly Reports. Look for PDF or HTML versions.
Prioritize XBRL/iXBRL: If XBRL (eXtensible Business Reporting Language) or iXBRL (inline XBRL) filings are available (common for US SEC filings and increasingly for others), these are structured data and MUCH easier to parse accurately than PDFs. Libraries exist in many languages to parse XBRL.
Document Parsing (AI/NLP):
For PDFs/HTML: Use AI-powered document analysis tools (could be custom models or services like Google Document AI, AWS Textract, Azure Form Recognizer) to:
Extract tables containing financial statements (Income Statement, Balance Sheet, Cash Flow Statement).
Identify the specific line items needed (e.g., "Total Revenues," "Net earnings attributable to common shares," "Cash flows from operating activities," "Payments for property, plant and equipment," "Long-term debt").
Handle different table structures, languages (if you aim for true global coverage, though starting with English is wise), and accounting standards (GAAP vs. IFRS can have different presentations).
Extract data for the last 10-12 fiscal years.
Data Storage: Store this verified, extracted data in your PostgreSQL database. This data can then be prioritized for that company in future requests.
User Feedback: Inform the user if this deep search is initiated and that it might take time.
Layer 3: Data Quality Monitoring & Manual Override (For You/Admins)

Flagging System: Your app should flag companies where:
Data is consistently missing across all sources.
Data looks suspicious (e.g., extreme outliers not explained by corporate actions).
Growth rates are impossible.
Admin Interface (Optional but useful for you): A simple interface where you can review flagged data and potentially manually input/correct verified figures from annual reports if all automated methods fail for a particularly important company.
Addressing Specifics from Your List:

Global Coverage: The companies listed (from US, Taiwan, Denmark, Netherlands, China, Brazil, UAE, Russia, Australia, UK, Canada, etc.) mean your ticker normalization and the global reach of your chosen APIs are paramount. Alpha Vantage and FMP often have broader international fundamental data than Yahoo Finance's free tier for deep historicals. The "Deep Search AI Agent" is your best bet for filling gaps for companies like PLZL (Polyus, Russia) or EMAAR (Emaar Properties, DFM) if standard APIs struggle.
Missing Figures ("—"): For companies like COSCO SHIPPING (SSE-601919) or SUNGROW POWER SUPP (SZSE-300274) showing "—" in some columns (even on TradingView), this indicates data scarcity. Your AI agent would be the primary way to attempt to fill these. If even official reports don't break out the numbers in the required way for 10 years, the app must transparently state that "Sufficient historical data for a complete Rule One analysis is unavailable from public sources."
Currency: Standardize data to a common currency (e.g., USD) for comparisons across companies, or at least ensure consistent currency for calculating growth rates for a single company. Financial reports often provide exchange rates used.
Implementation Phasing:

Solidify Layer 1: Make your existing multi-API integration as robust as possible with better ticker/exchange handling and data validation. Ensure you get the full 10 years where available.
Develop a Prototype "Deep Search AI Agent" (Layer 2): Start with US companies (due to easily accessible and structured SEC EDGAR filings, including XBRL). Focus on extracting the "Big Five" numbers from 10-K reports.
Expand AI Agent Capabilities: Gradually add support for international report formats, different languages (if ambitious), and improve parsing accuracy.
Build Data Quality Tools (Layer 3): As you process more companies, you'll need ways to identify and manage data issues.
This is a significant undertaking, but by combining readily available APIs with your innovative AI-driven "deep search" for source documents, you can build a uniquely powerful Rule One Investing Assistant that truly addresses the data challenges investors face, especially with global companies. The list you've provided is an excellent test set for this system!