---
// Props for the component
interface Props {
  selectedSymbol?: string;
  onStockSelect?: (symbol: string) => void; // This prop will need to be handled with client-side JS
  isLoading?: boolean;
}

const { selectedSymbol, onStockSelect, isLoading = false } = Astro.props;

// Mock list of popular stocks (replace with actual data fetching)
const popularStocks = [
  { symbol: 'AAPL', name: 'Apple Inc.' },
  { symbol: 'MSFT', name: 'Microsoft Corporation' },
  { symbol: 'GOOGL', name: 'Alphabet Inc.' },
  { symbol: 'AMZN', name: 'Amazon.com Inc.' },
  { symbol: 'TSLA', name: 'Tesla, Inc.' },
];
---

<div class="bg-white shadow rounded-lg p-6">
  <h3 class="text-lg font-semibold mb-4">Select a Stock</h3>

  {isLoading ? (
    <!-- Skeleton Loader -->
    <div class="space-y-4">
      <div class="h-10 bg-gray-200 rounded w-full"></div>
      <div class="h-6 bg-gray-200 rounded w-3/4"></div>
    </div>
  ) : (
    <!-- Stock Selection UI -->
    <div class="space-y-4">
      <!-- Simple Select Dropdown (replace with a more robust search/select component if needed) -->
      <select id="stock-select" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        <option value="" disabled selected>-- Select a Stock --</option>
        {popularStocks.map(stock => (
          <option value={stock.symbol} selected={selectedSymbol === stock.symbol}>
            {stock.symbol} - {stock.name}
          </option>
        ))}
      </select>

      <!-- Display selected stock symbol -->
      {selectedSymbol && (
        <div class="text-sm text-gray-600">
          Selected: <span class="font-medium text-gray-900">{selectedSymbol}</span>
        </div>
      )}
    </div>
  )}
</div>

{onStockSelect && (
  <script lang="ts" define:vars={{ onStockSelect }}>
    document.addEventListener('DOMContentLoaded', () => {
      const stockSelect = document.getElementById('stock-select') as HTMLSelectElement | null;

      if (stockSelect) {
        stockSelect.addEventListener('change', (event) => {
          const selectedSymbol = stockSelect.value;
          // Call the onStockSelect function passed from the parent Astro page
          onStockSelect(selectedSymbol);
        });
      }
    });
  </script>
)}
