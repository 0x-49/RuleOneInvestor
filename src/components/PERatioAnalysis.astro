---
// Props for the component
interface Props {
  stockSymbol?: string;
  companyName?: string;
  peRatio?: number;
  industryPeRatio?: number;
  sectorPeRatio?: number;
  historicalPeRatios?: { year: string; peRatio?: number }[];
  isLoading?: boolean;
}

const { stockSymbol, companyName, peRatio, industryPeRatio, sectorPeRatio, historicalPeRatios, isLoading = false } = Astro.props;

// Helper function to format P/E ratio
const formatPERatio = (value?: number) => {
  return value !== undefined ? value.toFixed(2) : 'N/A';
};

// Prepare chart data for historical P/E ratios
const chartData = historicalPeRatios?.map(item => ({
  year: item.year,
  peRatio: item.peRatio,
})).reverse() || [];

const hasHistoricalData = chartData.length > 0;
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      P/E Ratio Analysis
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Analyzing the Price-to-Earnings ratio for {companyName || 'Company'} ({stockSymbol || 'TICKER'})
    </p>
  </div>

  <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        <div class="grid grid-cols-3 gap-4">
          <div class="h-12 bg-gray-200 rounded"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
        </div>
        <div class="h-64 bg-gray-200 rounded w-full"></div>
      </div>
    ) : (peRatio === undefined && industryPeRatio === undefined && sectorPeRatio === undefined && !hasHistoricalData) ? (
      <!-- No Data Fallback -->
      <div class="text-center text-gray-500">
        P/E ratio data not available for {stockSymbol || 'this stock'}.
      </div>
    ) : (
      <!-- P/E Ratio Metrics and Chart -->
      <div class="space-y-6">
        <div class="grid grid-cols-3 text-center text-sm font-medium">
          <div>
            <p class="text-gray-600">Current P/E</p>
            <p class="text-gray-900 font-bold">{formatPERatio(peRatio)}</p>
          </div>
          <div>
            <p class="text-gray-600">Industry Avg P/E</p>
            <p class="text-gray-900 font-bold">{formatPERatio(industryPeRatio)}</p>
          </div>
          <div>
            <p class="text-gray-600">Sector Avg P/E</p>
            <p class="text-gray-900 font-bold">{formatPERatio(sectorPeRatio)}</p>
          </div>
        </div>

        {hasHistoricalData && (
          <!-- Historical P/E Ratio Chart -->
          <div class="mt-6">
            <h4 class="text-md font-medium text-gray-900 mb-3">Historical P/E Ratio</h4>
            <div class="w-full h-64" id="pe-ratio-chart"></div>
          </div>
        )}
      </div>
    )}
  </div>
</div>

{hasHistoricalData && (
  <script define:vars={{ chartData }}>
    import Chart from 'chart.js/auto'; // Import Chart.js

    document.addEventListener('DOMContentLoaded', () => {
      const chartCanvas = document.getElementById('pe-ratio-chart');

      if (chartCanvas && chartData && chartData.length > 0) {
        new Chart(chartCanvas, {
          type: 'line',
          data: {
            labels: chartData.map(item => item.year),
            datasets: [
              {
                label: 'P/E Ratio',
                data: chartData.map(item => item.peRatio),
                borderColor: '#4F46E5', // Indigo
                backgroundColor: 'rgba(79, 70, 229, 0.2)',
                tension: 0.1,
                fill: false,
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'P/E Ratio'
                }
              },
              x: {
                title: {
                  display: true,
                  text: 'Year'
                }
              }
            },
            plugins: {
              legend: {
                position: 'top',
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    let label = context.dataset.label || '';
                    if (label) {
                      label += ': ';
                    }
                    if (context.parsed.y !== null) {
                      label += context.parsed.y.toFixed(2);
                    }
                    return label;
                  }
                }
              }
            }
          },
        });
      }
    });
  </script>
)}

<style>
  /* Add any component-specific styles here */
</style>
