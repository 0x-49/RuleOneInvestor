---
// Props for the component
interface Props {
  watchlistItems?: {
    symbol: string;
    name?: string;
    price?: number;
    change?: number;
    changePercent?: number;
  }[];
  isLoading?: boolean;
}

const { watchlistItems, isLoading = false } = Astro.props;

// Helper function to format currency
const formatCurrency = (value?: number) => {
  return value !== undefined ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 2 }).format(value) : 'N/A';
};

// Helper function to format percentage
const formatPercent = (value?: number) => {
  return value !== undefined ? `${value.toFixed(2)}%` : 'N/A';
};
---

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
  <div class="px-4 py-5 sm:px-6">
    <h3 class="text-lg leading-6 font-medium text-gray-900">
      Watchlist
    </h3>
    <p class="mt-1 max-w-2xl text-sm text-gray-500">
      Your list of tracked stocks.
    </p>
  </div>

  <div class="border-t border-gray-200">
    {isLoading ? (
      <!-- Skeleton Loader -->
      <div class="p-6 space-y-4">
        <div class="h-6 bg-gray-200 rounded w-48"></div>
        {[...Array(5)].map((_, i) => (
          <div class="grid grid-cols-3 gap-4">
            <div class="h-4 bg-gray-200 rounded col-span-1"></div>
            <div class="h-4 bg-gray-200 rounded col-span-1"></div>
            <div class="h-4 bg-gray-200 rounded col-span-1"></div>
          </div>
        ))}
      </div>
    ) : !watchlistItems?.length ? (
      <!-- No Data Fallback -->
      <div class="p-6 text-center text-gray-500">
        Your watchlist is empty.
      </div>
    ) : (
      <!-- Watchlist Items -->
      <ul class="divide-y divide-gray-200">
        {watchlistItems.map(item => (
          <li class="px-4 py-4 sm:px-6">
            <div class="flex items-center justify-between">
              <div class="flex-1 pr-4">
                <a href={`/stock/${item.symbol}`} class="text-sm font-medium text-blue-600 hover:text-blue-800">
                  {item.symbol}
                </a>
                {item.name && <p class="text-sm text-gray-500">{item.name}</p>}
              </div>
              <div class="text-right">
                <p class="text-sm font-medium text-gray-900">{formatCurrency(item.price)}</p>
                <p class={`text-sm ${item.change! >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                  {item.change !== undefined ? formatCurrency(item.change) : 'N/A'} ({item.changePercent !== undefined ? formatPercent(item.changePercent) : 'N/A'})
                </p>
              </div>
            </div>
          </li>
        ))}
      </ul>
    )}
  </div>
</div>
