---
import type { StockWithMetrics } from '../shared/schema';
import Card from './ui/card.astro';
import CardHeader from './ui/card-header.astro';
import CardTitle from './ui/card-title.astro';
import CardContent from './ui/card-content.astro';
import Button from './ui/button.astro';

interface Props {
  stockData?: StockWithMetrics;
  isLoading: boolean;
  symbol: string;
}

const { stockData, isLoading, symbol } = Astro.props;

// Helper functions for valuations
const formatCurrency = (value: number | null | undefined) => {
  if (value === null || value === undefined) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};

const formatPercentage = (value: number | null | undefined) => {
  if (value === null || value === undefined) return 'N/A';
  return `${(value * 100).toFixed(2)}%`;
};

// Get current stock price
const currentPrice = stockData?.price || 0;

// Default values for DCF calculation
const defaultGrowthRate = 0.15; // 15%
const defaultDiscountRate = 0.09; // 9%
const defaultTerminalRate = 0.03; // 3%
const defaultYears = 10;
const defaultMOS = 0.50; // 50% margin of safety

// Extract data for valuation if available
// Get the most recent metrics if available
const latestMetrics = stockData?.metrics?.length ? 
  stockData.metrics.sort((a, b) => b.year.localeCompare(a.year))[0] : undefined;

const eps = latestMetrics?.eps || 0;
const freeCashFlow = latestMetrics?.freeCashFlow || 0;

// For shares outstanding we'll estimate based on market cap and price
// This is a workaround since we don't have sharesOutstanding directly in the schema
const sharesOutstanding = stockData?.marketCap && stockData.price > 0 ? 
  stockData.marketCap / stockData.price : 0;
const fcfPerShare = sharesOutstanding > 0 ? freeCashFlow / sharesOutstanding : 0;

// Simple DCF calculation
let intrinsicValue = 0;
let marginOfSafetyValue = 0;

if (fcfPerShare > 0) {
  // Very basic DCF
  let totalPresentValue = 0;
  let projectedFCF = fcfPerShare;
  
  for (let year = 1; year <= defaultYears; year++) {
    projectedFCF *= (1 + defaultGrowthRate);
    const presentValue = projectedFCF / Math.pow(1 + defaultDiscountRate, year);
    totalPresentValue += presentValue;
  }
  
  // Terminal value
  const terminalValue = (projectedFCF * (1 + defaultTerminalRate)) / 
                       (defaultDiscountRate - defaultTerminalRate);
  const presentTerminalValue = terminalValue / Math.pow(1 + defaultDiscountRate, defaultYears);
  
  intrinsicValue = totalPresentValue + presentTerminalValue;
  marginOfSafetyValue = intrinsicValue * (1 - defaultMOS);
}
---

<Card>
  <CardHeader>
    <CardTitle>Valuation Tools</CardTitle>
  </CardHeader>
  
  <CardContent>
    {isLoading ? (
      <div class="flex justify-center items-center h-48">
        <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">
          <span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
        </div>
      </div>
    ) : symbol && !stockData ? (
      <div class="flex flex-col items-center justify-center h-48 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 class="mt-2 text-lg font-medium">No valuation data available</h3>
        <p class="mt-1 text-sm text-gray-500">We couldn't find valuation metrics for {symbol}.</p>
      </div>
    ) : (
      <div>
        <div class="mb-6">
          <h3 class="text-lg font-medium mb-2">Current Metrics</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            <div class="border rounded-lg p-4">
              <h4 class="text-sm font-medium text-gray-600">Current Price</h4>
              <p class="text-xl font-bold">{formatCurrency(currentPrice)}</p>
            </div>
            <div class="border rounded-lg p-4">
              <h4 class="text-sm font-medium text-gray-600">EPS (TTM)</h4>
              <p class="text-xl font-bold">{formatCurrency(eps)}</p>
            </div>
            <div class="border rounded-lg p-4">
              <h4 class="text-sm font-medium text-gray-600">FCF/Share</h4>
              <p class="text-xl font-bold">{formatCurrency(fcfPerShare)}</p>
            </div>
          </div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-medium mb-2">DCF Valuation (Simplified)</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="border rounded-lg p-4">
              <h4 class="text-sm font-medium text-gray-600">Intrinsic Value</h4>
              <p class="text-xl font-bold">{formatCurrency(intrinsicValue)}</p>
              <p class="text-xs text-gray-500 mt-1">Estimated fair value per share</p>
            </div>
            <div class="border rounded-lg p-4">
              <h4 class="text-sm font-medium text-gray-600">Margin of Safety Price</h4>
              <p class="text-xl font-bold">{formatCurrency(marginOfSafetyValue)}</p>
              <p class="text-xs text-gray-500 mt-1">Price with {formatPercentage(defaultMOS)} margin of safety</p>
            </div>
          </div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-medium mb-2">Valuation Assumptions</h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
            <div class="border rounded-lg p-3">
              <h4 class="text-xs font-medium text-gray-600">Growth Rate</h4>
              <p class="text-lg font-bold">{formatPercentage(defaultGrowthRate)}</p>
            </div>
            <div class="border rounded-lg p-3">
              <h4 class="text-xs font-medium text-gray-600">Discount Rate</h4>
              <p class="text-lg font-bold">{formatPercentage(defaultDiscountRate)}</p>
            </div>
            <div class="border rounded-lg p-3">
              <h4 class="text-xs font-medium text-gray-600">Terminal Growth</h4>
              <p class="text-lg font-bold">{formatPercentage(defaultTerminalRate)}</p>
            </div>
            <div class="border rounded-lg p-3">
              <h4 class="text-xs font-medium text-gray-600">Projection Years</h4>
              <p class="text-lg font-bold">{defaultYears}</p>
            </div>
          </div>
        </div>

        <div class="mt-6">
          <p class="text-sm text-gray-600">* Simplified DCF valuation uses default assumptions. For a more accurate valuation, adjust the parameters to match the company's specific situation.</p>
          <Button class="mt-4" id="calculate-valuation-button">Customize Valuation</Button>
        </div>
      </div>
    )}
  </CardContent>
</Card>

<script>
  // Initialize the valuation calculator
  document.addEventListener('DOMContentLoaded', () => {
    const calculateButton = document.getElementById('calculate-valuation-button');
    
    if (calculateButton) {
      calculateButton.addEventListener('click', () => {
        // In a full implementation, this would open a modal with customization options
        alert('Advanced valuation calculator would open here. Coming soon!');
      });
    }
  });
</script>
