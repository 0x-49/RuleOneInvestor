---
import { Card, CardContent, CardHeader, CardTitle } from '../client/src/components/ui/card'; // Assuming UI components are React
import { Badge } from '../client/src/components/ui/badge'; // Assuming UI components are React
import { TrendingUp, AlertTriangle, DollarSign, Newspaper } from 'lucide-react'; // Keep for now, will address later
import { formatDistanceToNow } from 'date-fns'; // Keep for now

interface NewsItem {
  id: string;
  title: string;
  summary: string;
  timestamp: string; // Change to string as fetched data might be string
  type: 'earnings' | 'alert' | 'price' | 'news';
  symbol?: string;
}

// Fetch news data
const response = await fetch(`${Astro.url.origin}/api/news`);
const newsItems: NewsItem[] = response.ok ? await response.json() : [];

const getNewsIcon = (type: string) => {
  switch (type) {
    case "earnings":
      return <TrendingUp className="h-4 w-4" />;
    case "alert":
      return <AlertTriangle className="h-4 w-4" />;
    case "price":
      return <DollarSign className="h-4 w-4" />;
    default:
      return <Newspaper className="h-4 w-4" />;
  }
};

const getNewsColor = (type: string) => {
  switch (type) {
    case "earnings":
      return "border-primary text-primary";
    case "alert":
      return "border-yellow-500 text-yellow-500";
    case "price":
      return "border-green-500 text-green-500";
    default:
      return "border-slate-500 text-slate-500";
  }
};

const getNewsTypeLabel = (type: string) => {
  switch (type) {
    case "earnings":
      return "Earnings";
    case "alert":
      return "Alert";
    case "price":
      return "Price Alert";
    default:
      return "News";
  }
};
---

<Card>
  <CardHeader>
    <CardTitle>Recent Updates</CardTitle>
  </CardHeader>
  <CardContent>
    {newsItems.length === 0 ? (
      <div class="text-center text-slate-600 dark:text-slate-400 py-8">
        <p>No recent updates</p>
        <p class="text-sm mt-2">News and alerts will appear here</p>
      </div>
    ) : (
      <div class="space-y-4">
        {newsItems.map((item) => (
          <div
            class={`border-l-4 pl-4 ${getNewsColor(item.type)}`}
          >
            <div class="flex items-center justify-between mb-2">
              <div class="flex items-center space-x-2">
                {getNewsIcon(item.type)}
                <span class="text-sm font-medium text-slate-900 dark:text-slate-100">
                  {item.title}
                </span>
              </div>
              {item.symbol && (
                <Badge variant="outline" className="text-xs">
                  {item.symbol}
                </Badge>
              )}
            </div>

            <div class="text-xs text-slate-600 dark:text-slate-400 mb-2">
              {formatDistanceToNow(new Date(item.timestamp), { addSuffix: true })}
              {" â€¢ "}
              {getNewsTypeLabel(item.type)}
            </div>

            <div class="text-sm text-slate-700 dark:text-slate-300">
              {item.summary}
            </div>
          </div>
        ))}
      </div>
    )}
  </CardContent>
</Card>
